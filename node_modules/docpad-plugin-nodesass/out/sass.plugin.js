// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var NodesassPlugin, TaskGroup, bourbon, fs, mkdirp, neat, sass, _ref;
  fs = require('fs');
  TaskGroup = require('taskgroup').TaskGroup;
  sass = require('node-sass');
  bourbon = require('node-bourbon').includePaths;
  neat = require('node-neat').includePaths;
  mkdirp = require('mkdirp');
  return NodesassPlugin = (function(_super) {
    __extends(NodesassPlugin, _super);

    function NodesassPlugin() {
      _ref = NodesassPlugin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NodesassPlugin.prototype.name = 'nodesass';

    NodesassPlugin.prototype.config = {
      bourbon: false,
      debugInfo: false,
      neat: false,
      renderUnderscoreStylesheets: false,
      sourceMap: false
    };

    NodesassPlugin.prototype.generateBefore = function(opts, next) {
      var config, tasks;
      config = this.config;
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).once('complete', next);
      return tasks.run();
    };

    NodesassPlugin.prototype.extendCollections = function(opts) {
      var config, docpad;
      config = this.config;
      docpad = this.docpad;
      if (config.renderUnderscoreStylesheets === false) {
        this.underscoreStylesheets = docpad.getDatabase().findAllLive({
          filename: /^_(.*?)\.(?:scss)/
        });
        return this.underscoreStylesheets.on('add', function(model) {
          return model.set({
            render: false,
            write: false
          });
        });
      }
    };

    NodesassPlugin.prototype.render = function(opts, next) {
      var callback, cmdOpts, config, file, fullDirPath, inExtension, outExtension, paths;
      config = this.config;
      inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file;
      if (config.neat) {
        config.bourbon = true;
      }
      if ((inExtension === 'scss') && (outExtension === 'css' || outExtension === null)) {
        fullDirPath = file.get('fullDirPath');
        callback = function(css, map) {
          var fileName, path;
          if (map) {
            path = file.get('outPath') + '.map';
            fileName = path.split('/').pop();
            mkdirp(file.get('outDirPath'), function(err) {
              if (err) {
                return console.log(err);
              } else {
                return fs.writeFile(path, map, function(err) {
                  if (err) {
                    return console.log(err);
                  }
                });
              }
            });
            css = '/*# sourceMappingURL=./' + fileName + ' */\n' + css;
          }
          opts.content = css;
          return next();
        };
        cmdOpts = {
          success: callback,
          error: function(err) {
            return next(new Error(err));
          }
        };
        if (fullDirPath) {
          paths = [fullDirPath];
          if (config.bourbon) {
            paths.push(bourbon);
          }
          if (config.neat) {
            paths.push(neat);
          }
          cmdOpts.includePaths = paths;
        }
        if (config.debugInfo && config.debugInfo !== 'none') {
          cmdOpts.sourceComments = config.debugInfo;
          cmdOpts.file = file.attributes.fullPath;
        } else {
          cmdOpts.data = opts.content;
        }
        if (config.sourceMap) {
          cmdOpts.sourceMap = config.sourceMap;
        }
        return sass.render(cmdOpts);
      } else {
        return next();
      }
    };

    return NodesassPlugin;

  })(BasePlugin);
};
